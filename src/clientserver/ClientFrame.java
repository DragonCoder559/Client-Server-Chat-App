package clientserver;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * A UI panel that allows users to select global or private messaging
 *
 * @author Kyle Starr
 */
public class ClientFrame extends javax.swing.JFrame {

    private final Client client;
    private ArrayList<Message> messages;
    private final Users users;

    /**
     * Creates new form ClientFrame
     *
     * @param client - the client object
     * @param messages - the ArrayList that handles each client message
     * @param users - Holds the client username and message recipient
     *
     */
    public ClientFrame(Client client, ArrayList<Message> messages, Users users) {
        initComponents();
        setLocationRelativeTo(null); //Sets page to center screen

        this.client = client;
        this.messages = messages;
        this.users = users;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Global = new javax.swing.JButton();
        Private = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Global.setText("Global");
        Global.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GlobalActionPerformed(evt);
            }
        });

        Private.setText("Private");
        Private.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrivateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Global, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Private, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(Global)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(Private)
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Sets up global messaging in the server when "Global" button is pressed
     *
     * @param evt unused, auto generated
     */
    private void GlobalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GlobalActionPerformed
        client.send("G"); //To indicate Global messaging

        users.setRecipient("Everyone");

        setVisible(false);
        runUI(); //To display messaging panel
    }//GEN-LAST:event_GlobalActionPerformed

    /**
     * Sets up private messaging in the server when "Private" button is pressed
     *
     * @param evt unused, auto generated
     */
    private void PrivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrivateActionPerformed
        client.send("P"); //To indicate Private messaging

        String message1 = client.receive(); //Asks for what username to connect
        String recipient = JOptionPane.showInputDialog(message1);
        client.send(recipient);
        String message2 = client.receive();
        JOptionPane.showMessageDialog(null, message2);

        //If user is not found, switch to global message
        if (message2.equals("Cannot locate user. Switching to Global Messaging")) {
            users.setRecipient("Everyone");
        } else {
            users.setRecipient(recipient);
        }
        

        setVisible(false);

        runUI(); //To display messaging panel
    }//GEN-LAST:event_PrivateActionPerformed

    /**
     * After an action is performed, the ClientUI will be loaded
     */
    private void runUI() {
        // Create a new ClientUI object and load that up in place of the current
        // frame
        ClientUI ui = new ClientUI(client, messages, users);
        ui.setVisible(true);

        //Sets up a thread to receive messages
        Thread t = new Thread(new ClientThread(client, ui, messages,
                users.getUsername()));
        t.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Global;
    private javax.swing.JButton Private;
    // End of variables declaration//GEN-END:variables
}
