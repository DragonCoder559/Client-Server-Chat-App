package clientserver;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * This the messaging UI that allow users to send and see messages from others
 *
 * @author Cameron Christner
 */
public class ClientUI extends javax.swing.JFrame {

    private final Client client;
    private MessageModel model;
    private ArrayList<Message> messages;
    private final Users users;

    /**
     * Sets up the ClientUI panel
     *
     * @param client the client for server communication
     * @param messages the list of messages
     * @param users contains the client username and the message recipient
     */
    public ClientUI(Client client, ArrayList<Message> messages, Users users) {
        initComponents();
        setLocationRelativeTo(null); //Sets window to apper center screen

        this.client = client;
        this.messages = messages;
        this.users = users;

        //Message model to display messages in a table
        model = new MessageModel();

        //Sets the message list to serve as the table's data
        model.setMessages(messages);
        messageTable.setModel(model);

        messageTable.getColumnModel().getColumn(0)
                .setMaxWidth(100); //Sets table size

        model.fireTableDataChanged(); //Refreshes table

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        messageTable = new javax.swing.JTable();
        messageField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        messageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sender", "Messages"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(messageTable);
        if (messageTable.getColumnModel().getColumnCount() > 0) {
            messageTable.getColumnModel().getColumn(0).setResizable(false);
            messageTable.getColumnModel().getColumn(0).setPreferredWidth(1);
            messageTable.getColumnModel().getColumn(1).setResizable(false);
        }

        messageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageFieldActionPerformed(evt);
            }
        });
        messageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageFieldKeyTyped(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Refreshes the table to update the displayed messages
     *
     * @param messages the updated message list
     */
    public void refresh(ArrayList<Message> messages) {
        model.setMessages(messages);
        model.fireTableDataChanged();
    }


    private void messageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageFieldActionPerformed

    }//GEN-LAST:event_messageFieldActionPerformed

    /**
     * Sends the message to the server when the send button is pressed
     *
     * @param evt unused, auto-generated
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String message = messageField.getText();
        messageField.setText(""); //Clears message field

        Message mess = new Message(users.getUsername(), message,
                users.getRecipient());

        if (!client.sendMessage(mess)) { //Sends message
            JOptionPane.showMessageDialog(null,
                    "Could not send message to Server"); //If send fails

        } else { //Updates the message Table
            messages.add(mess);
            model.setMessages(messages);
            model.fireTableDataChanged();
        }

    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * Unused, auto-generated
     *
     * @param evt Unused, auto-generated
     */
    private void messageFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyTyped

    }//GEN-LAST:event_messageFieldKeyTyped

    /**
     * Sends the message to the server when the enter button is pressed
     *
     * @param evt unused, auto-generated
     */
    private void messageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { //Checks if enter button
            String message = messageField.getText();
            messageField.setText(""); //Clears message field

            Message mess = new Message(users.getUsername(), message,
                    users.getUsername());

            if (!client.sendMessage(mess)) { //Sends message
                 //If send fails
                JOptionPane.showMessageDialog(null,
                        "Could not send message to Server");
                
            } else { //Updates message Table
                messages.add(mess);
                model.setMessages(messages);
                model.fireTableDataChanged();
            }
        }
    }//GEN-LAST:event_messageFieldKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField messageField;
    private javax.swing.JTable messageTable;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
}
